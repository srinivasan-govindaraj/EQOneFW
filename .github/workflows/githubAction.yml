name: EQONEFW[Web,API,Mobile etc]

permissions:
  checks: write
  contents: write

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [ 25, 29 ]
        target: [ default ]

    steps:
      - uses: actions/checkout@v4

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm


      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
#      - uses: browser-actions/setup-chrome@latest
#      - run: chrome --version
#
#      - name: Build with Maven
#        run: mvn -B clean test



      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install Appium
        run: |
          npm install -g appium
          appium -v
          appium driver install uiautomator2
          appium driver install chromedriver
          appium driver list --installed



      - name: Start Appium Server
        run: appium --allow-insecure chromedriver_autodownload &>/dev/null &


      - name: Run Appium Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Nexus 6
          script: mvn clean test
#      - name: Store docker image cache
#        uses: satackey/action-docker-layer-caching@v0.0.11
#        continue-on-error: true

#      # Solution 1: Install X11 utilities
#      - name: Install X11 utilities
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y x11-xserver-utils
#
#      # Solution 2: Set up Xvfb
#      - name: Set up Xvfb
#        run: |
#          sudo apt-get install -y xvfb
#          Xvfb :99 -ac &
#          export DISPLAY=:99

      # Solution 3: Configure tests for headless mode
#      - name: Set Java AWT Headless Property
#        run: echo "JAVA_OPTS=-Djava.awt.headless=true" >> $GITHUB_ENV
#
#      - name: Set up docker-compose-selenoid.yml with X11 support
#        run: |
#          docker pull selenoid/vnc_chrome:128.0
#          docker pull selenoid/video-recorder:latest-release
#          docker pull selenium/standalone-chrome:latest
#          curl -s https://aerokube.com/cm/bash | bash
#          ./cm selenoid start --vnc

#      - name: Start docker-selenoid UI
#        run: |
#          ./cm selenoid-ui start
#
#      - name: Restore Maven cache
#        uses: skjolber/maven-cache-github-action@v1
#        continue-on-error: true
#        with:
#          step: restore

#      - name: Run tests with maven
#        run: mvn -fn test


      - name: Publish TestNG Report
        uses: starburstdata/action-testng-report@master
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: "**/testng-results.xml"

      - name: Deploy pages
        uses: JamesIves/github-pages-deploy-action@v4.5.0
        with:
          branch: gh-pages
          folder: ./test-output/Report

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Selenium Test Results
          path: test-output/**/*

      - name: Save Maven cache
        uses: skjolber/maven-cache-github-action@v1
        continue-on-error: true
        with:
          step: save

#      - name: Stop docker-selenoid
#        if: always()
#        run: |
#          ./cm selenoid stop
#          ./cm selenoid-ui stop
